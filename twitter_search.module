<?php

/**
 * @file
 * Adds search API features to the Twitter module.
 */

/**
 * Implements hook_permission().
 */
function twitter_search_permission() {
  return array(
    'administer twitter search' => array(
      'title' => t('administer twitter search'),
      'description' => t('Administer twitter search'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function twitter_search_views_api() {
  return array('api' => '2.0');
}

/**
 * Implements hook_menu().
 */
function twitter_search_menu() {
  $items = array();

  $items['admin/config/services/twitter/twitter_search'] = array(
    'title' => 'Twitter search',
    'description' => 'Settings for the site\'s Twitter search integration.',
    'page callback' => 'twitter_search_list_page',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer twitter search'),
    'file' => 'twitter_search.pages.inc',
  );
  $items['admin/config/services/twitter/twitter_search/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -25,
  );
  $items['admin/config/services/twitter/twitter_search/add'] = array(
    'title' => 'Add Twitter search text',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twitter_search_add_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer twitter search'),
    'file' => 'twitter_search.pages.inc',
  );
  $items['admin/config/services/twitter/twitter_search/delete/%'] = array(
    'title' => 'Delete Twitter search text',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twitter_search_delete_confirm'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer twitter search'),
    'file' => 'twitter_search.pages.inc',
  );
  return $items;
}


/**
 * Implements hook_cron().
 *
 * Imports new Twitter search statuses for site searches.
 */
function twitter_search_cron() {
  if (!variable_get('twitter_import', TRUE)) {
    return;
  }
  module_load_include('inc', 'twitter');
  // Check if we can connect to Twitter before proceeding.
  $twitter = twitter_connect();
  if (!$twitter) {
    return;
  }

  // Get a list of search strings to update.
  $sql = "SELECT twitter_search_id, search, last_twitter_id
          FROM {twitter_search}
          ORDER BY last_refresh";
  $results = db_query($sql);

  try {
    while ($search = $results->fetchAssoc()) {
      $statuses = twitter_search_fetch_search($search['search']);
      if (!empty($statuses)) {
        // Store last time search was fetched so that we grab new searches
        // first. Also store the last twitter id for each search so that we only
        // pull updated tweets.
        db_update('twitter_search')
          ->fields(array(
            'last_twitter_id' => $statuses[0]->twitter_id,
            'last_refresh' => $_SERVER['REQUEST_TIME'],
          ))
          ->condition('search', $search['search'])
          ->execute();
      }
    }
  }
  catch (TwitterException $e) {
    // The exception has already been logged so we do not need to do
    // anything here apart from caching it.
  }
}

/**
 * Implement the "search" method from Twitter.
 *
 * @see http://apiwiki.twitter.com/Twitter-Search-API-Method%3A+search
 *
 * @param String $search
 *   Assoc array containing search string, search id, and last twitter id.
 *
 * @return Boolean
 *   Whether or not to cache the Twitter statues.
 */
function twitter_search_fetch_search($search) {
  // Check if we can connect to Twitter before proceeding.
  module_load_include('inc', 'twitter');
  $twitter = twitter_connect();
  if (!$twitter) {
    return;
  }

  // Connect to the Twitter's API.
  $twitter = twitter_connect();
  $params = array();

  // Fetch tweets.
  $statuses = $twitter->search_tweets($search, $params);
  foreach ($statuses as $status) {
    twitter_status_save($status);
    twitter_account_save($status->user);
  }
  return $statuses;
}

/**
 * Tests whether search already exists.
 *
 * @param String $search
 *   Assoc array containing search string, search id, and last twitter id.
 *
 * @return Boolean
 *   Boolean. Whether or not to cache the Twitter statues.
 */
function twitter_search_already_exists($search) {
  $result = db_query("SELECT search FROM {twitter_search} WHERE search = :search", array(':search' => $search))->fetchField();
  return $result ? TRUE : FALSE;
}
